import * as fs from 'fs';
import * as path from 'path';
import * as crypto from 'crypto';
import * as os from 'os';

/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
export class SecurityUtils {
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –ø–∞—Ä–æ–ª—å
   */
  static generateSecurePassword(length: number = 16): string {
    const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
    let password = '';
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞
    password += charset.charAt(Math.floor(Math.random() * 26)); // –ó–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
    password += charset.charAt(26 + Math.floor(Math.random() * 26)); // –°—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞
    password += charset.charAt(52 + Math.floor(Math.random() * 10)); // –¶–∏—Ñ—Ä–∞
    password += charset.charAt(62 + Math.floor(Math.random() * 8)); // –°–ø–µ—Ü—Å–∏–º–≤–æ–ª
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    for (let i = 4; i < length; i++) {
      password += charset.charAt(Math.floor(Math.random() * charset.length));
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–æ–ª—å—à–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    return password.split('').sort(() => Math.random() - 0.5).join('');
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
   */
  static createSecureTempDir(prefix: string = 'secure_temp'): string {
    const timestamp = Date.now();
    const randomBytes = crypto.randomBytes(8).toString('hex');
    const tempDir = path.join(os.tmpdir(), `${prefix}_${timestamp}_${randomBytes}`);
    
    fs.mkdirSync(tempDir, { recursive: true });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (Unix-—Å–∏—Å—Ç–µ–º—ã)
    try {
      fs.chmodSync(tempDir, 0o700);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ Windows
    }
    
    return tempDir;
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö
   */
  static async secureDeleteFile(filePath: string): Promise<void> {
    if (!fs.existsSync(filePath)) {
      return;
    }

    try {
      const stat = fs.statSync(filePath);
      if (stat.isFile()) {
        // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å–ª—É—á–∞–π–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ 3 —Ä–∞–∑–∞
        for (let i = 0; i < 3; i++) {
          const randomData = crypto.randomBytes(stat.size);
          fs.writeFileSync(filePath, randomData);
        }
      }
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
      fs.unlinkSync(filePath);
    } catch (error) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
   */
  static async secureDeleteDirectory(dirPath: string): Promise<void> {
    if (!fs.existsSync(dirPath)) {
      return;
    }

    try {
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã
      const filesToDelete: string[] = [];
      const dirsToDelete: string[] = [];

      const walkDir = (dir: string) => {
        const items = fs.readdirSync(dir);
        for (const item of items) {
          const fullPath = path.join(dir, item);
          const stat = fs.statSync(fullPath);
          if (stat.isDirectory()) {
            dirsToDelete.push(fullPath);
            walkDir(fullPath);
          } else {
            filesToDelete.push(fullPath);
          }
        }
      };

      walkDir(dirPath);

      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
      for (const file of filesToDelete) {
        await this.secureDeleteFile(file);
      }

      // –£–¥–∞–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      dirsToDelete.reverse();
      for (const dir of dirsToDelete) {
        try {
          fs.rmdirSync(dir);
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        }
      }

      // –£–¥–∞–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      fs.rmdirSync(dirPath);
      
      console.log(`üîí –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirPath} –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–µ–Ω–∞`);
    } catch (error) {
      console.error(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error);
      // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
      try {
        fs.rmSync(dirPath, { recursive: true, force: true });
      } catch (finalError) {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é ${dirPath}:`, finalError);
      }
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—ä–µ–∫—Ç–∞
   */
  static clearSensitiveObject(obj: any, sensitiveKeys: string[] = ['privateKey', 'password', 'secret']): void {
    if (!obj || typeof obj !== 'object') {
      return;
    }

    for (const key of Object.keys(obj)) {
      if (sensitiveKeys.includes(key.toLowerCase())) {
        if (typeof obj[key] === 'string') {
          obj[key] = '';
        } else if (typeof obj[key] === 'object') {
          this.clearSensitiveObject(obj[key], sensitiveKeys);
        }
      } else if (typeof obj[key] === 'object') {
        this.clearSensitiveObject(obj[key], sensitiveKeys);
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   */
  static isSecureTempDir(dirPath: string): boolean {
    try {
      const stat = fs.statSync(dirPath);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è Unix-—Å–∏—Å—Ç–µ–º)
      if (process.platform !== 'win32') {
        const mode = stat.mode & 0o777;
        if (mode !== 0o700) {
          return false;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
      const tempDir = os.tmpdir();
      return dirPath.startsWith(tempDir);
    } catch (error) {
      return false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
   */
  static generateRandomFileName(extension: string = ''): string {
    const timestamp = Date.now();
    const randomBytes = crypto.randomBytes(8).toString('hex');
    return `${timestamp}_${randomBytes}${extension}`;
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
   */
  static createSecureTempFile(content: string, extension: string = '.tmp'): string {
    const tempDir = this.createSecureTempDir('secure_file');
    const fileName = this.generateRandomFileName(extension);
    const filePath = path.join(tempDir, fileName);
    
    fs.writeFileSync(filePath, content);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ (Unix-—Å–∏—Å—Ç–µ–º—ã)
    try {
      fs.chmodSync(filePath, 0o600);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –Ω–∞ Windows
    }
    
    return filePath;
  }
}
