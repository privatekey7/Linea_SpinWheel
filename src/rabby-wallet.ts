import { chromium, BrowserContext, Page } from 'playwright';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import * as crypto from 'crypto';
import { SecurityUtils } from './utils/security';

export interface RabbyWalletConfig {
  privateKey: string;
  password?: string;
  extensionPath?: string;
}

export class RabbyWallet {
  private config: RabbyWalletConfig;
  private context: BrowserContext | null = null;
  private extensionId: string | null = null;
  private tempProfile: string | null = null;
  private sessionPassword: string | null = null;

  constructor(config: RabbyWalletConfig) {
    this.config = {
      extensionPath: path.resolve(process.cwd(), 'Rabby-Wallet-Chrome'),
      ...config
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–µ–∞–Ω—Å–∞
   */
  private generateSecurePassword(): string {
    return SecurityUtils.generateSecurePassword(16);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
   */
  private createTempProfile(): string {
    return SecurityUtils.createSecureTempDir('rabby_import');
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å—é –¥–∞–Ω–Ω—ã—Ö
   */
  private async secureCleanupTempProfile(tempProfile: string): Promise<void> {
    await SecurityUtils.secureDeleteDirectory(tempProfile);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–º—è—Ç–∏
   */
  private clearSensitiveData(): void {
    // –û—á–∏—â–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –ø–∞–º—è—Ç–∏
    if (this.sessionPassword) {
      this.sessionPassword = null;
    }
    
    // –û—á–∏—â–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    SecurityUtils.clearSensitiveObject(this.config, ['privateKey', 'password', 'secret']);
    
    // –û—á–∏—â–∞–µ–º extensionId
    this.extensionId = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º Rabby
   */
  async initialize(): Promise<void> {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ–∞–Ω—Å–∞
    this.sessionPassword = this.generateSecurePassword();
    console.log('üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–µ–∞–Ω—Å–∞');
    
    this.tempProfile = this.createTempProfile();
    
    try {
      // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
      const chromeArgs = [
        `--disable-extensions-except=${this.config.extensionPath}`,
        `--load-extension=${this.config.extensionPath}`,
        "--disable-blink-features=AutomationControlled",
        "--no-first-run",
        "--disable-web-security",
        "--disable-features=VizDisplayCompositor", // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        "--disable-dev-shm-usage", // –ò–∑–±–µ–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è /dev/shm
        "--no-sandbox", // –¢–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
        "--disable-setuid-sandbox"
      ];
      
      this.context = await chromium.launchPersistentContext(this.tempProfile, {
        headless: false,
        args: chromeArgs,
        ignoreDefaultArgs: ["--disable-extensions"],
        viewport: { width: 1200, height: 800 }
      });
      
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // –ü–æ–∏—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      await this.findExtension();
      
    } catch (error) {
      await this.cleanup();
      throw error;
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è Rabby
   */
  private async findExtension(): Promise<void> {
    if (!this.context) throw new Error("–ö–æ–Ω—Ç–µ–∫—Å—Ç –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–æ 15 —Ä–∞–∑ (–¥–æ 45 —Å–µ–∫—É–Ω–¥)
    for (let attempt = 0; attempt < 15; attempt++) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pages = this.context.pages();
      for (const page of pages) {
        const url = page.url();
        if (url.includes("chrome-extension://") && 
            (url.toLowerCase().includes("rabby") || url.includes("index.html"))) {
          this.extensionId = url.split("chrome-extension://")[1].split("/")[0];
          break;
        }
      }
      
      if (this.extensionId) {
        break;
      }
      
      // –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –∂–¥—ë–º –µ—â—ë
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
    
    // –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –∏—â–µ–º —á–µ—Ä–µ–∑ chrome://extensions/
    if (!this.extensionId) {
      const extPage = await this.context.newPage();
      await extPage.goto("chrome://extensions/");
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      this.extensionId = await extPage.evaluate(() => {
        const items = document.querySelectorAll('extensions-item');
        for (let i = 0; i < items.length; i++) {
          const item = items[i];
          const name = item.querySelector('#name');
          if (name && name.textContent && name.textContent.toLowerCase().includes('rabby')) {
            const id = item.id.replace('extension-', '');
            return id;
          }
        }
        return null;
      });
      
      await extPage.close();
      
      if (!this.extensionId) {
        throw new Error("–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ Rabby –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
      }
    }
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –∫–æ—à–µ–ª—å–∫–∞ –≤ Rabby
   */
  async importWallet(): Promise<string> {
    if (!this.context || !this.extensionId || !this.sessionPassword) {
      throw new Error("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    const currentKey = this.config.privateKey;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    const pages = this.context.pages();
    let page = null;
    
    // –ò—â–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    for (const existingPage of pages) {
      const url = existingPage.url();
      if (url.includes("chrome-extension://") && url.includes(this.extensionId)) {
        page = existingPage;
        break;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    if (!page) {
      page = await this.context.newPage();
      const setupUrl = `chrome-extension://${this.extensionId}/index.html#/new-user/guide`;
      await page.goto(setupUrl);
    }
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await page.reload();
    
    try {
      // –®–∞–≥ 1: –ñ–¥—ë–º –∏ –∫–ª–∏–∫–∞–µ–º "I already have an address"
      await page.waitForSelector('span:has-text("I already have an address")', { timeout: 30000 });
      await page.click('span:has-text("I already have an address")');
      
      // –®–∞–≥ 2: –ñ–¥—ë–º –∏ –∫–ª–∏–∫–∞–µ–º –≤—ã–±–æ—Ä "Private Key"
      const privateKeySelector = 'div.rabby-ItemWrapper-rabby--mylnj7:has-text("Private Key")';
      await page.waitForSelector(privateKeySelector, { timeout: 30000 });
      await page.click(privateKeySelector);
      
      // –®–∞–≥ 3: –ñ–¥—ë–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏ –≤–≤–æ–¥–∏–º –∫–ª—é—á
      const privateKeyInput = '#privateKey';
      await page.waitForSelector(privateKeyInput, { timeout: 30000 });
      await page.click(privateKeyInput);
      await page.fill(privateKeyInput, currentKey);
      
      // –®–∞–≥ 4: –ñ–¥—ë–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ Confirm –∏ –∫–ª–∏–∫–∞–µ–º
      const confirmButtonSelector = 'button:has-text("Confirm"):not([disabled])';
      await page.waitForSelector(confirmButtonSelector, { timeout: 30000 });
      await page.click(confirmButtonSelector);
      
      // –®–∞–≥ 5: –ñ–¥—ë–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –≤–≤–æ–¥–∏–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
      const passwordInput = '#password';
      await page.waitForSelector(passwordInput, { timeout: 30000 });
      await page.click(passwordInput);
      await page.fill(passwordInput, this.sessionPassword);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Tab
      await page.press(passwordInput, 'Tab');
      await page.keyboard.type(this.sessionPassword);
      
      // –®–∞–≥ 6: –ñ–¥—ë–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ Confirm –∏ –∫–ª–∏–∫–∞–µ–º
      const passwordConfirmButton = 'button:has-text("Confirm"):not([disabled])';
      await page.waitForSelector(passwordConfirmButton, { timeout: 30000 });
      await page.click(passwordConfirmButton);
      
      // –®–∞–≥ 7: –ñ–¥—ë–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–º–ø–æ—Ä—Ç–µ
      await page.waitForSelector('text=Imported Successfully', { timeout: 30000 });
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
      let walletAddress = null;
      try {
        const address = await page.evaluate(() => {
          const text = document.body.textContent;
          if (!text) return null;
          const match = text.match(/0x[a-fA-F0-9]{40}/);
          return match ? match[0] : null;
        });
        if (address) {
          walletAddress = address;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
      }
      
      await page.close();
      
      return walletAddress || '';
      
    } catch (error) {
      await page.close();
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º
   */
  async getPage(): Promise<Page> {
    if (!this.context) {
      throw new Error("–ë—Ä–∞—É–∑–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    
    // –ò—â–µ–º —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–æ—à–µ–ª—å–∫–æ–º
    const pages = this.context.pages();
    for (const page of pages) {
      const url = page.url();
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º (–æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
      if (!url.includes("chrome-extension://") && !url.includes("chrome://")) {
        return page;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
    return await this.context.newPage();
  }

  /**
   * –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async cleanup(): Promise<void> {
    try {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
      if (this.context) {
        await this.context.close();
        this.context = null;
      }
      
      // –û—á–∏—â–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏
      this.clearSensitiveData();
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
      if (this.tempProfile) {
        await this.secureCleanupTempProfile(this.tempProfile);
        this.tempProfile = null;
      }
      
      console.log('üîí –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã –∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    } catch (error) {
      console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ cleanup)
   */
  async close(): Promise<void> {
    await this.cleanup();
  }
}
