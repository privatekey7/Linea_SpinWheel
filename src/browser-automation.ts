import { chromium, Browser, Page, BrowserContext } from 'playwright';
import { getAddress } from 'viem';
// –£–¥–∞–ª—ë–Ω –∏–º–ø–æ—Ä—Ç WalletInjection - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
import { RabbyWallet, RabbyWalletConfig } from './rabby-wallet';
import { LineaRewardsConnector, LineaRewardsConfig } from './linea-rewards-connector';
import { WalletDatabase, WalletData } from './modules/database';
import { WalletDataExtractor } from './modules/wallet-data-extractor';

export interface SpinResult {
  success: boolean;
  reward?: string;
  error?: string;
  timestamp: number;
}

export interface WalletConfig {
  privateKey: string;
  address: string;
}

export class LineaSpinWheelBot {
  private browser: Browser | null = null;
  private context: BrowserContext | null = null;
  private page: Page | null = null;
  private wallet: WalletConfig;
  // –£–¥–∞–ª–µ–Ω–æ: private walletInjection: WalletInjection;
  private rabbyWallet: RabbyWallet | null = null;
  private lineaRewardsConnector: LineaRewardsConnector | null = null;
  private walletDatabase: WalletDatabase;
  private walletDataExtractor: WalletDataExtractor;

  constructor(wallet: WalletConfig) {
    this.wallet = wallet;
    
    // –£–¥–∞–ª–µ–Ω–æ: –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ—à–µ–ª—ë–∫ (fallback) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Rabby Wallet
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    this.walletDatabase = new WalletDatabase();
    this.walletDataExtractor = new WalletDataExtractor();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º
   */
  async initialize(): Promise<void> {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ —Å Rabby Wallet...');
      
      // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Rabby Wallet
      const rabbyConfig: RabbyWalletConfig = {
        privateKey: this.wallet.privateKey
      };
      
      this.rabbyWallet = new RabbyWallet(rabbyConfig);
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Rabby Wallet
      await this.rabbyWallet.initialize();
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ—à–µ–ª—ë–∫
      const walletAddress = await this.rabbyWallet.importWallet();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º
      this.page = await this.rabbyWallet.getPage();
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞ Linea Rewards
      const rewardsConfig: LineaRewardsConfig = {
        url: 'https://linea.build/hub/rewards',
        timeout: 30000
      };
      
      this.lineaRewardsConnector = new LineaRewardsConnector(this.page, rewardsConfig);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞ —Å Rabby Wallet:', error);
      
      // Fallback –∫ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º—É –∫–æ—à–µ–ª—å–∫—É
      await this.initializeWithProgrammaticWallet();
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º (fallback)
   */
  private async initializeWithProgrammaticWallet(): Promise<void> {
    try {
      // –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      this.browser = await chromium.launch({
        headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        slowMo: 1000, // –ó–∞–º–µ–¥–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        args: [
          '--disable-web-security',
          '--disable-features=VizDisplayCompositor',
          '--no-sandbox',
          '--disable-setuid-sandbox'
        ]
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      this.context = await this.browser.newContext({
        viewport: { width: 1280, height: 720 },
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        bypassCSP: true // –û–±—Ö–æ–¥–∏–º Content Security Policy
      });

      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      this.page = await this.context.newPage();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–º –∫–æ—à–µ–ª—å–∫–æ–º:', error);
      throw error;
    }
  }



  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Linea Rewards
   */
  async connectToLineaRewards(): Promise<boolean> {
    if (!this.page || !this.lineaRewardsConnector) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä –∏–ª–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {
      console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Linea Rewards...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const connected = await this.lineaRewardsConnector.connect();
      
      if (!connected) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Linea Rewards');
        return false;
      }
      
      console.log('‚úÖ –ö–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Linea Rewards');
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–µ–ª—å–∫–µ
      await this.extractAndSaveWalletData();
      
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Linea Rewards:', error);
      return false;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏–Ω–∞
   */
  async performSpin(): Promise<SpinResult> {
    if (!this.page || !this.lineaRewardsConnector) {
      throw new Error('–ë—Ä–∞—É–∑–µ—Ä –∏–ª–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    try {

      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏–Ω–∞
      const result = await this.lineaRewardsConnector.performSpin();
      
      // –ï—Å–ª–∏ —Å–ø–∏–Ω —É—Å–ø–µ—à–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—à–µ–ª—å–∫–∞
      if (result.success) {
        await this.updateWalletStatsAfterSpin();
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç SpinResult
      return {
        success: result.success,
        reward: result.reward,
        error: result.error,
        timestamp: result.timestamp
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏–Ω–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        timestamp: Date.now()
      };
    }
  }

  /**
   * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å–ø–∏–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
   */
  async spinWheel(): Promise<SpinResult> {
    if (!this.page) {
      return {
        success: false,
        error: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞',
        timestamp: Date.now()
      };
    }

    try {
      console.log('üé∞ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å–ø–∏–Ω–∞...');
      


      // –®–∞–≥ 1: –ù–∞–∂–∏–º–∞–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É "Spin the wheel" –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
              // –ù–∞–∂–∏–º–∞–µ–º –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É "Spin the wheel"
      await this.page.click('button:has-text("Spin the wheel")');
      await this.page.waitForTimeout(2000);

      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
              // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      await this.page.waitForSelector('xpath=/html/body/div[2]/div/div[3]/main/div[1]/div[3]/div/div[1]/div/div[2]/div[2]/button/span', { timeout: 10000 });

      // –®–∞–≥ 2: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –Ω–∞–∂–∏–º–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É "Spin the wheel"
              // –ù–∞–∂–∏–º–∞–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É "Spin the wheel" –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º XPath —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏
      await this.page.click('xpath=/html/body/div[2]/div/div[3]/main/div[1]/div[3]/div/div[1]/div/div[2]/div[2]/button/span');
      
      await this.page.waitForTimeout(2000);

      // –®–∞–≥ 3: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è "Complete the transaction to spin."
              // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await this.page.waitForSelector('h2:has-text("Complete the transaction to spin.")', { timeout: 10000 });

      // –®–∞–≥ 4: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è popup –æ–∫–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞
              // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è popup –æ–∫–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞
      
      // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è popup –æ–∫–Ω–∞ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      let walletPopup: Page | undefined = undefined;
      let attempts = 0;
      const maxAttempts = 10;
      
      while (!walletPopup && attempts < maxAttempts) {
        await this.page.waitForTimeout(1000);
        attempts++;
        
                 const pages = this.page.context().pages();
         for (const page of pages) {
           const url = page.url();
           // –ò—â–µ–º popup –æ–∫–Ω–æ Rabby Wallet
           if ((url.includes('chrome-extension://') || url.includes('moz-extension://')) && 
               url.includes('notification.html')) {
             walletPopup = page;
             // –ù–∞–π–¥–µ–Ω–æ popup –æ–∫–Ω–æ
             break;
           }
         }
        
        if (!walletPopup) {
          // –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}: Popup –æ–∫–Ω–æ –∫–æ—à–µ–ª—å–∫–∞ –µ—â–µ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å
        }
      }
      
      if (!walletPopup) {
        console.log('‚ÑπÔ∏è Popup –æ–∫–Ω–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –ø–æ—è–≤–∏–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
      }

             // –®–∞–≥ 5: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º popup –æ–∫–Ω–æ –∫–æ—à–µ–ª—å–∫–∞
       const popupResult = await this.handleWalletPopup(walletPopup);
       if (!popupResult.success) {
         console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ popup –æ–∫–Ω–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...');
         // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ popup –æ–∫–Ω–æ –º–æ–≥–ª–æ –∑–∞–∫—Ä—ã—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
       }

             // –®–∞–≥ 6: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–∏–Ω–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
               // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–ø–∏–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
       
       // –ñ–¥–µ–º, –ø–æ–∫–∞ popup –æ–∫–Ω–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
       await this.page.waitForTimeout(3000);
       
       // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–Ω–∞
       try {
                 await this.page.bringToFront();
      } catch (error) {
        // –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }

      // –®–∞–≥ 7: –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞
      const spinResult = await this.extractSpinResult();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (spinResult.reward) {
        if (spinResult.reward.includes("Better Luck Next Time") || spinResult.reward.includes("–ü—Ä–æ–∏–≥—Ä—ã—à")) {
          console.log('üòî –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞: –ü–†–û–ò–ì–†–´–®');
        } else if (spinResult.reward.includes("–í—ã–∏–≥—Ä—ã—à")) {
          console.log('üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞: –í–´–ò–ì–†–´–®!');
          console.log(`üí∞ –î–µ—Ç–∞–ª–∏ –ø—Ä–∏–∑–∞: ${spinResult.reward}`);
        } else {
          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞:', spinResult.reward);
        }
      }
      
             // –®–∞–≥ 8: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—à–µ–ª—å–∫–∞
       try {
         await this.updateWalletStatsAfterSpin();
       } catch (error) {
         // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
       }

      // –°–ø–∏–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω
      return {
        success: true,
        reward: spinResult.reward,
        timestamp: Date.now()
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ —Å–ø–∏–Ω–∞:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        timestamp: Date.now()
      };
    }
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Linea Rewards
   */
  async reloadAndReconnect(): Promise<boolean> {
    if (!this.page) {
      console.log('‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      return false;
    }

    try {
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
      await this.page.reload({ waitUntil: 'networkidle' });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      await this.page.waitForTimeout(3000);
      
      // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Linea Rewards
      const connected = await this.connectToLineaRewards();
      if (connected) {
        console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ Linea Rewards');
        return true;
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Linea Rewards –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
      return false;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ popup –æ–∫–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  private async handleWalletPopup(walletPopup?: Page): Promise<{ success: boolean; error?: string }> {
    try {
      // –ï—Å–ª–∏ popup –æ–∫–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, –∏—â–µ–º –µ–≥–æ
      if (!walletPopup) {
        const pages = this.page!.context().pages();
        
                 for (const page of pages) {
           const url = page.url();
           // –ò—â–µ–º popup –æ–∫–Ω–æ Rabby Wallet
           if ((url.includes('chrome-extension://') || url.includes('moz-extension://')) && 
               url.includes('notification.html')) {
             walletPopup = page;
             // –ù–∞–π–¥–µ–Ω–æ popup –æ–∫–Ω–æ –≤ handleWalletPopup
             break;
           }
         }
      }

      if (!walletPopup) {
        // –ï—Å–ª–∏ popup –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        console.log('‚ÑπÔ∏è Popup –æ–∫–Ω–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
        return { success: true };
      }

      // –ù–∞–π–¥–µ–Ω–æ popup –æ–∫–Ω–æ –∫–æ—à–µ–ª—å–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ popup –æ–∫–Ω–æ
      await walletPopup.bringToFront();
      await walletPopup.waitForTimeout(2000);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å –ª–∏ popup –æ–∫–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      const pageContent = await walletPopup.content();
      const pageTitle = await walletPopup.title();
      const pageUrl = walletPopup.url();
       
                     // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º popup –æ–∫–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        
        try {
          // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É
          await walletPopup.reload({ waitUntil: 'domcontentloaded' });
          await walletPopup.waitForTimeout(2000);
          
                               // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ popup –æ–∫–Ω–∞
          await walletPopup.waitForLoadState('domcontentloaded');
          // Popup –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
          const newPageContent = await walletPopup.content();
          const newPageTitle = await walletPopup.title();
          const newPageUrl = walletPopup.url();
          
                 } catch (reloadError: unknown) {
           const errorMessage = reloadError instanceof Error ? reloadError.message : String(reloadError);
           // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ popup –æ–∫–Ω–∞
           
                   // Fallback: –ø—Ä–æ–±—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É URL
        try {
          // –ü—Ä–æ–±—É–µ–º fallback - –Ω–∞–≤–∏–≥–∞—Ü–∏—é –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É URL
             const currentUrl = walletPopup.url();
             
             if (currentUrl.includes('notification.html') && !currentUrl.includes('#/approval')) {
               const correctUrl = currentUrl + '#/approval';
               await walletPopup.goto(correctUrl, { waitUntil: 'domcontentloaded' });
               await walletPopup.waitForTimeout(2000);
               
               // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
               await walletPopup.waitForLoadState('domcontentloaded');
               console.log('‚úÖ Fallback —É—Å–ø–µ—à–µ–Ω - popup –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
             }
           } catch (fallbackError: unknown) {
             const fallbackErrorMessage = fallbackError instanceof Error ? fallbackError.message : String(fallbackError);
             // Fallback —Ç–∞–∫–∂–µ –Ω–µ —É–¥–∞–ª—Å—è
             // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
           }
         }

      // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (Sign/Confirm) —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      let signButton = null;
      let attempts = 0;
      const maxButtonAttempts = 8; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
      
      while (!signButton && attempts < maxButtonAttempts) {
        await walletPopup.waitForTimeout(1500); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        attempts++;
        
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
        signButton = await walletPopup.$([
          'button:has-text("Sign")',
          'button:has-text("Confirm")', 
          'button:has-text("–ü–æ–¥–ø–∏—Å–∞—Ç—å")',
          'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
          '[data-testid="sign-button"]',
          '[data-testid="confirm-button"]',
          '.sign-button',
          '.confirm-button',
          'button[type="submit"]'
        ].join(', '));
        
        if (!signButton) {
          // –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxButtonAttempts}: –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö —Ç–µ–∫—Å—Ç
          const allButtons = await walletPopup.$$('button');
          
                      for (let i = 0; i < allButtons.length; i++) {
              try {
                const buttonText = await allButtons[i].textContent();
                const buttonVisible = await allButtons[i].isVisible();
                // –ö–Ω–æ–ø–∫–∞ ${i + 1}: "${buttonText}" (–≤–∏–¥–∏–º–∞—è: ${buttonVisible})
              } catch (e) {
                // –ö–Ω–æ–ø–∫–∞ ${i + 1}: [–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç]
              }
            }
        }
      }
      
                      if (signButton) {
           // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∏
           await signButton.click();
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ popup –æ–∫–Ω–æ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
           let popupStillOpen = true;
           try {
             await walletPopup.waitForTimeout(2000);
           } catch (error) {
             // Popup –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è Sign, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
             popupStillOpen = false;
           }

           // –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ popup –æ–∫–Ω–æ –≤—Å–µ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–æ
           if (popupStillOpen) {
             try {
               // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
               const confirmButton = await walletPopup.$([
                 'button:has-text("Confirm")',
                 'button:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")',
                 '[data-testid="confirm-button"]',
                 '.confirm-button',
                 'button[type="submit"]:has-text("Confirm")',
                 'button[type="submit"]:has-text("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")'
               ].join(', '));
               
               if (confirmButton) {
                 // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                 await confirmButton.click();
                 
                 // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ popup –æ–∫–Ω–æ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                 try {
                   await walletPopup.waitForTimeout(3000);
                 } catch (error) {
                   // Popup –æ–∫–Ω–æ –∑–∞–∫—Ä—ã–ª–æ—Å—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è Confirm, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                 }
               } else {
                 // –ö–Ω–æ–ø–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞
                 
                 // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                 const allButtons = await walletPopup.$$('button');
                 
                 for (let i = 0; i < allButtons.length; i++) {
                   try {
                     const buttonText = await allButtons[i].textContent();
                     const buttonVisible = await allButtons[i].isVisible();
                     // –ö–Ω–æ–ø–∫–∞ ${i + 1} –ø–æ—Å–ª–µ Sign: "${buttonText}" (–≤–∏–¥–∏–º–∞—è: ${buttonVisible})
                   } catch (e) {
                     // –ö–Ω–æ–ø–∫–∞ ${i + 1} –ø–æ—Å–ª–µ Sign: [–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç]
                   }
                 }
               }
             } catch (error) {
               // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, popup –æ–∫–Ω–æ –º–æ–≥–ª–æ –∑–∞–∫—Ä—ã—Ç—å—Å—è
             }
           }
         } else {
           // –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫, –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
         }

         // –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è popup –æ–∫–Ω–∞
         await this.page!.waitForTimeout(2000);

         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
         try {
           await this.page!.bringToFront();
                     // –£—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        } catch (error) {
          // –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        }

      return { success: true };

         } catch (error: unknown) {
       const errorMessage = error instanceof Error ? error.message : String(error);
       console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ popup –æ–∫–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞:', errorMessage);
       return {
         success: false,
         error: errorMessage
       };
     }
  }

     /**
    * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–∏–Ω–∞
    */
   private async extractSpinResult(): Promise<{ reward?: string }> {
     try {
       // –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–∏–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (15 —Å–µ–∫—É–Ω–¥)
       
       // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–∏–Ω–∞ 15 —Å–µ–∫—É–Ω–¥
       await this.page!.waitForTimeout(15000);

       // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç "Better Luck Next Time" (–ø—Ä–æ–∏–≥—Ä—ã—à)
       const betterLuckElement = await this.page!.$('text="Better Luck Next Time"');
       
       if (betterLuckElement) {
         // –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç "Better Luck Next Time" - –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–≤–µ–∑–ª–æ
         return { reward: "Better Luck Next Time - –ø—Ä–æ–∏–≥—Ä—ã—à" };
       }

       // –ò—â–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–∏–≥—Ä—ã—à–∞
       const lossElements = await this.page!.$$('div:has-text("You didn\'t win"), div:has-text("Better luck"), div:has-text("No prize"), div:has-text("Try again")');
       
       if (lossElements.length > 0) {
         const lossText = await lossElements[0].textContent();
         // –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –ø—Ä–æ–∏–≥—Ä—ã—à–∞
         return { reward: `–ü—Ä–æ–∏–≥—Ä—ã—à: ${lossText?.trim()}` };
       }

       // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤—ã–∏–≥—Ä—ã—à–∞
       const winElements = await this.page!.$$('div:has-text("You won"), div:has-text("Congratulations"), div:has-text("Prize"), div:has-text("USDC"), div:has-text("ETH"), div:has-text("$")');
       
       if (winElements.length > 0) {
         const winText = await winElements[0].textContent();
         // –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –≤—ã–∏–≥—Ä—ã—à–∞
         return { reward: `–í—ã–∏–≥—Ä—ã—à: ${winText?.trim()}` };
       }

       // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
       const modalElements = await this.page!.$$('div[role="dialog"] *');
       
       for (const element of modalElements) {
         try {
           const text = await element.textContent();
           if (text && (
             text.includes("Better Luck Next Time") ||
             text.includes("You won") ||
             text.includes("Congratulations") ||
             text.includes("USDC") ||
             text.includes("Prize")
           )) {
             // –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
             
             if (text.includes("Better Luck Next Time")) {
               return { reward: "Better Luck Next Time - –ø—Ä–æ–∏–≥—Ä—ã—à" };
             } else {
               return { reward: `–í—ã–∏–≥—Ä—ã—à: ${text.trim()}` };
             }
           }
         } catch (e) {
           // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
         }
       }

       // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ª—É—á–∞–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
       const pageContent = await this.page!.textContent('body');
       
       if (pageContent) {
         if (pageContent.includes("Better Luck Next Time")) {
           // –ù–∞–π–¥–µ–Ω "Better Luck Next Time" –≤ –æ–±—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ - –ø—Ä–æ–∏–≥—Ä—ã—à
           return { reward: "Better Luck Next Time - –ø—Ä–æ–∏–≥—Ä—ã—à" };
         }
         
         // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –æ–±—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
         const winKeywords = ["You won", "Congratulations", "Prize won", "USDC won", "ETH won"];
         for (const keyword of winKeywords) {
           if (pageContent.includes(keyword)) {
             // –ù–∞–π–¥–µ–Ω –ø—Ä–∏–∑–Ω–∞–∫ –≤—ã–∏–≥—Ä—ã—à–∞
             return { reward: `–í—ã–∏–≥—Ä—ã—à –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${keyword}` };
           }
         }
       }

       // –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∏–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
       return { reward: "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω" };

           } catch (error: unknown) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–ø–∏–Ω–∞:', errorMessage);
        return { reward: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞" };
      }
   }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—à–µ–ª—å–∫–µ
   */
  async extractAndSaveWalletData(): Promise<void> {
    if (!this.page) {
      return;
    }

    try {
      // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
      const cardFound = await this.walletDataExtractor.waitForWalletCard(this.page);
      if (!cardFound) {
        console.log('‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
      }
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–µ–ª—å–∫–µ
      const walletData = await this.walletDataExtractor.extractWalletData(this.page, this.wallet.privateKey);
      if (!walletData) {
        console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–µ–ª—å–∫–µ');
        return;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
      await this.walletDatabase.saveWalletData(walletData);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ—à–µ–ª—å–∫–∞:', error);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getWalletData(address?: string): Promise<WalletData | null> {
    const targetAddress = address || this.wallet.address;
    return await this.walletDatabase.getWalletData(targetAddress);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async getAllWallets(): Promise<WalletData[]> {
    return await this.walletDatabase.getAllWallets();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
   */
  async updateWalletStats(stats: Partial<WalletData>): Promise<void> {
    await this.walletDatabase.updateWalletStats(this.wallet.address, stats);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏–Ω–∞
   */
  async updateWalletStatsAfterSpin(): Promise<void> {
    if (!this.page) {
      return;
    }

    try {
      
      // –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Å–ø–∏–Ω–∞
      await this.page.waitForTimeout(3000);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ—à–µ–ª—å–∫–µ
      const updatedWalletData = await this.walletDataExtractor.extractWalletData(this.page, this.wallet.privateKey);
      if (updatedWalletData) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –∞–¥—Ä–µ—Å –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        const statsToUpdate: Partial<WalletData> = {
          balance: updatedWalletData.balance,
          spinsAvailable: updatedWalletData.spinsAvailable,
          prizesWon: updatedWalletData.prizesWon,
          gamesPlayed: updatedWalletData.gamesPlayed,
          dayStreak: updatedWalletData.dayStreak,
          nextSpinTime: updatedWalletData.nextSpinTime,
          lastActivity: new Date().toISOString()
        };
        
        await this.walletDatabase.updateWalletStats(this.wallet.address, statsToUpdate);
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ —Å–ø–∏–Ω–∞:', error);
    }
  }




  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  async close(): Promise<void> {
    try {
      if (this.page) {
        await this.page.close();
        this.page = null;
      }
      
      if (this.rabbyWallet) {
        await this.rabbyWallet.cleanup();
        this.rabbyWallet = null;
      }
      
      if (this.context) {
        await this.context.close();
        this.context = null;
      }
      
      if (this.browser) {
        await this.browser.close();
        this.browser = null;
      }

      console.log('üîí –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç –∏ –≤—Å–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:', error);
    }
  }
}
