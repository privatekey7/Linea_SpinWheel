import * as fs from 'fs';
import * as path from 'path';
import { createPublicClient, createWalletClient, http, formatEther, parseEther } from 'viem';
import { privateKeyToAccount } from 'viem/accounts';
import { linea } from 'viem/chains';
import { delayAfterSuccessfulTransaction } from '../utils/delays';

export interface WalletData {
  address: string;
  balance?: string;
  wethBalance?: string;
  transactionCount?: number;
  lastActivity?: string;
  connectedAt: string;
  spinsAvailable?: number;
  prizesWon?: number;
  gamesPlayed?: number;
  dayStreak?: number;
  nextSpinTime?: string;
  todayTransfer?: boolean;
  lastTransferDate?: string;
  transferAmount?: string;
  lastSpinDate?: string;
}

export interface DatabaseConfig {
  filePath?: string;
}

export class WalletDatabase {
  private config: DatabaseConfig;
  private dataPath: string;

  constructor(config: DatabaseConfig = {}) {
    this.config = {
      filePath: 'wallet_database.json',
      ...config
    };
    
    this.dataPath = path.resolve(process.cwd(), this.config.filePath!);
    this.ensureDatabaseExists();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  private ensureDatabaseExists(): void {
    if (!fs.existsSync(this.dataPath)) {
      const initialData = {
        wallets: [],
        lastUpdate: new Date().toISOString()
      };
      fs.writeFileSync(this.dataPath, JSON.stringify(initialData, null, 2));
      console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${this.dataPath}`);
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã
   */
  private loadData(): { wallets: WalletData[]; lastUpdate: string } {
    try {
      const data = fs.readFileSync(this.dataPath, 'utf-8');
      return JSON.parse(data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
      return { wallets: [], lastUpdate: new Date().toISOString() };
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
   */
  private saveData(data: { wallets: WalletData[]; lastUpdate: string }): void {
    try {
      fs.writeFileSync(this.dataPath, JSON.stringify(data, null, 2));
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞
   */
  async saveWalletData(walletData: WalletData): Promise<void> {
    const data = this.loadData();
    
    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª—ë–∫
    const existingIndex = data.wallets.findIndex(w => w.address.toLowerCase() === walletData.address.toLowerCase());
    
    if (existingIndex >= 0) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const oldData = { ...data.wallets[existingIndex] };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª—ë–∫
      data.wallets[existingIndex] = {
        ...data.wallets[existingIndex],
        ...walletData,
        connectedAt: new Date().toISOString()
      };
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const changes: string[] = [];
      if (oldData.balance !== walletData.balance && walletData.balance) {
        changes.push(`–±–∞–ª–∞–Ω—Å ETH: ${oldData.balance} ‚Üí ${walletData.balance}`);
      }
      if (oldData.wethBalance !== walletData.wethBalance && walletData.wethBalance) {
        changes.push(`–±–∞–ª–∞–Ω—Å WETH: ${oldData.wethBalance} ‚Üí ${walletData.wethBalance}`);
      }
      if (oldData.spinsAvailable !== walletData.spinsAvailable && walletData.spinsAvailable !== undefined) {
        changes.push(`—Å–ø–∏–Ω—ã: ${oldData.spinsAvailable} ‚Üí ${walletData.spinsAvailable}`);
      }
      if (oldData.prizesWon !== walletData.prizesWon && walletData.prizesWon !== undefined) {
        changes.push(`–ø—Ä–∏–∑—ã: ${oldData.prizesWon} ‚Üí ${walletData.prizesWon}`);
      }
      if (oldData.gamesPlayed !== walletData.gamesPlayed && walletData.gamesPlayed !== undefined) {
        changes.push(`–∏–≥—Ä—ã: ${oldData.gamesPlayed} ‚Üí ${walletData.gamesPlayed}`);
      }
      if (oldData.dayStreak !== walletData.dayStreak && walletData.dayStreak !== undefined) {
        changes.push(`—Å—Ç—Ä–∏–∫: ${oldData.dayStreak} ‚Üí ${walletData.dayStreak}`);
      }
             if (oldData.nextSpinTime !== walletData.nextSpinTime && walletData.nextSpinTime) {
         changes.push(`–≤—Ä–µ–º—è —Å–ø–∏–Ω–∞: ${oldData.nextSpinTime} ‚Üí ${walletData.nextSpinTime}`);
       }
       if (oldData.lastSpinDate !== walletData.lastSpinDate && walletData.lastSpinDate) {
         changes.push(`–¥–∞—Ç–∞ —Å–ø–∏–Ω–∞: ${oldData.lastSpinDate} ‚Üí ${walletData.lastSpinDate}`);
       }
      
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫
      data.wallets.push({
        ...walletData,
        connectedAt: new Date().toISOString()
      });
    }
    
    data.lastUpdate = new Date().toISOString();
    this.saveData(data);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å—É
   */
  async getWalletData(address: string): Promise<WalletData | null> {
    const data = this.loadData();
    const wallet = data.wallets.find(w => w.address.toLowerCase() === address.toLowerCase());
    return wallet || null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  async getAllWallets(): Promise<WalletData[]> {
    const data = this.loadData();
    return data.wallets;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
   */
  async deleteWallet(address: string): Promise<boolean> {
    const data = this.loadData();
    const initialLength = data.wallets.length;
    
    data.wallets = data.wallets.filter(w => w.address.toLowerCase() !== address.toLowerCase());
    
    if (data.wallets.length < initialLength) {
      data.lastUpdate = new Date().toISOString();
      this.saveData(data);
      console.log(`üóëÔ∏è –£–¥–∞–ª—ë–Ω –∫–æ—à–µ–ª—ë–∫: ${address}`);
      return true;
    }
    
    return false;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—à–µ–ª—å–∫–∞
   */
  async updateWalletStats(address: string, stats: Partial<WalletData>): Promise<void> {
    const data = this.loadData();
    const walletIndex = data.wallets.findIndex(w => w.address.toLowerCase() === address.toLowerCase());
    
    if (walletIndex >= 0) {
      data.wallets[walletIndex] = {
        ...data.wallets[walletIndex],
        ...stats,
        lastActivity: new Date().toISOString()
      };
      
      data.lastUpdate = new Date().toISOString();
      this.saveData(data);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  getDatabaseStats(): { totalWallets: number; lastUpdate: string } {
    const data = this.loadData();
    return {
      totalWallets: data.wallets.length,
      lastUpdate: data.lastUpdate
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
   */
  isNewDayForWallet(address: string): boolean {
    const walletData = this.getWalletDataSync(address);
    if (!walletData) {
      return true; // –ï—Å–ª–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    }

    const now = new Date();
    const today = now.toISOString().split('T')[0]; // YYYY-MM-DD
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    // –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏–∫–∏ —Å–ø–∏–Ω–æ–≤ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
    const lastTransferDate = walletData.lastTransferDate ? walletData.lastTransferDate.split('T')[0] : null;
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è - –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if (lastTransferDate && lastTransferDate !== today) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const lastActivityDate = walletData.lastActivity ? walletData.lastActivity.split('T')[0] : null;
    const lastConnectedDate = walletData.connectedAt ? walletData.connectedAt.split('T')[0] : null;
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è - –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if (lastActivityDate && lastActivityDate !== today) {
      return true;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç lastActivity, –Ω–æ –µ—Å—Ç—å connectedAt –∏ –æ–Ω –Ω–µ —Å–µ–≥–æ–¥–Ω—è - –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if (!lastActivityDate && lastConnectedDate && lastConnectedDate !== today) {
      return true;
    }
    
    return false;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
   * –°–ø–∏–Ω—ã —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –≤ 3:00 UTC –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
   */
  shouldRefreshSpinsForNewDay(address: string): boolean {
    const walletData = this.getWalletDataSync(address);
    if (!walletData) {
      return true; // –ï—Å–ª–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    }

    const now = new Date();
    const today = now.toISOString().split('T')[0]; // YYYY-MM-DD
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ø–∏–Ω–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
    if (!walletData.lastSpinDate) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏–Ω–∞
    const lastSpinDate = walletData.lastSpinDate.split('T')[0];
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏–Ω –±—ã–ª –Ω–µ —Å–µ–≥–æ–¥–Ω—è - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏–Ω—ã
    if (lastSpinDate !== today) {
      return true;
    }
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏–Ω –±—ã–ª —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
    const lastSpin = new Date(walletData.lastSpinDate);
    const nowUTC = new Date();
    const nowUTCHours = nowUTC.getUTCHours();
    const lastSpinUTCHours = lastSpin.getUTCHours();
    
    // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ø–æ—Å–ª–µ 3:00 UTC, –∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏–Ω –±—ã–ª –¥–æ 3:00 UTC - –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏–Ω—ã
    if (nowUTCHours >= 3 && lastSpinUTCHours < 3) {
      return true;
    }
    
    return false;
  }

  /**
   * –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
   */
  resetDailyTransferFlagIfNewDay(address: string): void {
    const walletData = this.getWalletDataSync(address);
    if (!walletData) {
      return;
    }

    const now = new Date();
    const today = now.toISOString().split('T')[0]; // YYYY-MM-DD
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const lastTransferDate = walletData.lastTransferDate ? walletData.lastTransferDate.split('T')[0] : null;
    
    // –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –Ω–µ —Å–µ–≥–æ–¥–Ω—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    if (lastTransferDate && lastTransferDate !== today) {
      const data = this.loadData();
      const walletIndex = data.wallets.findIndex(w => w.address.toLowerCase() === address.toLowerCase());
      
      if (walletIndex >= 0) {
        data.wallets[walletIndex].todayTransfer = false;
        data.lastUpdate = new Date().toISOString();
        this.saveData(data);
        console.log(`üîÑ –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ ${address} (–Ω–æ–≤—ã–π –¥–µ–Ω—å)`);
      }
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ (–±–µ–∑ async)
   */
  private getWalletDataSync(address: string): WalletData | null {
    const data = this.loadData();
    return data.wallets.find(w => w.address.toLowerCase() === address.toLowerCase()) || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
   */
  async checkSpinsAvailable(address: string): Promise<boolean> {
    const walletData = await this.getWalletData(address);
    if (!walletData) {
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–Ω—ã
    return !!(walletData.spinsAvailable && walletData.spinsAvailable > 0);
  }

  /**
   * –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤
   */
  async decrementSpins(address: string): Promise<void> {
    const data = this.loadData();
    const walletIndex = data.wallets.findIndex(w => w.address.toLowerCase() === address.toLowerCase());
    
    if (walletIndex >= 0) {
      const currentSpins = data.wallets[walletIndex].spinsAvailable || 0;
      if (currentSpins > 0) {
        data.wallets[walletIndex].spinsAvailable = currentSpins - 1;
        data.wallets[walletIndex].lastActivity = new Date().toISOString();
        data.lastUpdate = new Date().toISOString();
        this.saveData(data);
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏–Ω–∞
   */
  async updateLastSpinDate(address: string): Promise<void> {
    const data = this.loadData();
    const walletIndex = data.wallets.findIndex(w => w.address.toLowerCase() === address.toLowerCase());
    
    if (walletIndex >= 0) {
      data.wallets[walletIndex].lastSpinDate = new Date().toISOString();
      data.wallets[walletIndex].lastActivity = new Date().toISOString();
      data.lastUpdate = new Date().toISOString();
      this.saveData(data);
      console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ø–∏–Ω–∞ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ ${address}`);
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ —Å–ø–∏–Ω–∞
   */
  async forceUpdateWalletData(address: string, newData: Partial<WalletData>): Promise<void> {
    const data = this.loadData();
    const walletIndex = data.wallets.findIndex(w => w.address.toLowerCase() === address.toLowerCase());
    
    if (walletIndex >= 0) {
      const oldData = { ...data.wallets[walletIndex] };
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
      data.wallets[walletIndex] = {
        ...data.wallets[walletIndex],
        ...newData,
        lastActivity: new Date().toISOString()
      };
      
      data.lastUpdate = new Date().toISOString();
      this.saveData(data);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const changes: string[] = [];
      Object.keys(newData).forEach(key => {
        const oldValue = oldData[key as keyof WalletData];
        const newValue = newData[key as keyof WalletData];
        if (oldValue !== newValue) {
          changes.push(`${key}: ${oldValue} ‚Üí ${newValue}`);
        }
      });
      
      if (changes.length > 0) {
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ ${address}: ${changes.join(', ')}`);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ RPC
   */
  private async getBalanceViaRPC(address: string): Promise<string | undefined> {
    try {
      const client = createPublicClient({
        chain: linea,
        transport: http('https://linea-mainnet.blastapi.io/0e189c72-1523-48e1-8727-7dd520f19c1f')
      });
      
      const balance = await client.getBalance({ address: address as `0x${string}` });
      const balanceInEth = formatEther(balance);
      
      return `${parseFloat(balanceInEth).toFixed(4)} ETH`;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ RPC:', error);
      return undefined;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ WETH –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ RPC
   */
  private async getWETHBalanceViaRPC(address: string): Promise<string | undefined> {
    try {
      const client = createPublicClient({
        chain: linea,
        transport: http('https://linea-mainnet.blastapi.io/0e189c72-1523-48e1-8727-7dd520f19c1f')
      });
      
      // ABI –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ balanceOf ERC20 —Ç–æ–∫–µ–Ω–∞
      const balanceOfAbi = [{
        name: 'balanceOf',
        type: 'function',
        stateMutability: 'view',
        inputs: [{ name: 'account', type: 'address' }],
        outputs: [{ name: '', type: 'uint256' }]
      }] as const;
      
      // –ê–¥—Ä–µ—Å WETH –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ Linea
      const wethAddress = '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f';
      
      const balance = await client.readContract({
        address: wethAddress as `0x${string}`,
        abi: balanceOfAbi,
        functionName: 'balanceOf',
        args: [address as `0x${string}`]
      });
      
      const balanceInWeth = formatEther(balance);
      
      return `${parseFloat(balanceInWeth).toFixed(9)} WETH`;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ WETH —á–µ—Ä–µ–∑ RPC:', error);
      return undefined;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ RPC
   */
  async updateWalletBalance(address: string): Promise<boolean> {
    try {
      const balance = await this.getBalanceViaRPC(address);
      if (balance) {
        const data = this.loadData();
        const walletIndex = data.wallets.findIndex(w => w.address.toLowerCase() === address.toLowerCase());
        
        if (walletIndex >= 0) {
          data.wallets[walletIndex].balance = balance;
          data.lastUpdate = new Date().toISOString();
          this.saveData(data);
          return true;
        } else {
          return false;
        }
      }
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ WETH –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ RPC
   */
  async updateWalletWETHBalance(address: string): Promise<boolean> {
    try {
      const wethBalance = await this.getWETHBalanceViaRPC(address);
      if (wethBalance) {
        const data = this.loadData();
        const walletIndex = data.wallets.findIndex(w => w.address.toLowerCase() === address.toLowerCase());
        
        if (walletIndex >= 0) {
          data.wallets[walletIndex].wethBalance = wethBalance;
          data.lastUpdate = new Date().toISOString();
          this.saveData(data);
          return true;
        } else {
          return false;
        }
      }
      return false;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ WETH:', error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ —á–µ—Ä–µ–∑ RPC
   */
  async updateAllWalletBalances(): Promise<void> {
    try {
      const data = this.loadData();
      
      for (const wallet of data.wallets) {
        await this.updateWalletBalance(wallet.address);
        await this.updateWalletWETHBalance(wallet.address);
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤:', error);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ transfer WETH
   */
  async performWETHTransfer(privateKey: string, amount: string): Promise<{ success: boolean; hash?: string; error?: string }> {
    try {
      const client = createPublicClient({
        chain: linea,
        transport: http('https://linea-mainnet.blastapi.io/0e189c72-1523-48e1-8727-7dd520f19c1f')
      });

      const walletClient = createWalletClient({
        account: privateKeyToAccount(privateKey as `0x${string}`),
        chain: linea,
        transport: http('https://linea-mainnet.blastapi.io/0e189c72-1523-48e1-8727-7dd520f19c1f')
      });

      // –ê–¥—Ä–µ—Å WETH –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ Linea
      const wethAddress = '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f';
      
      // ABI –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ transfer
      const transferAbi = [{
        name: 'transfer',
        type: 'function',
        stateMutability: 'nonpayable',
        inputs: [
          { name: 'to', type: 'address' },
          { name: 'amount', type: 'uint256' }
        ],
        outputs: [{ name: '', type: 'bool' }]
      }] as const;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ–º—É —Å–µ–±–µ
      const account = privateKeyToAccount(privateKey as `0x${string}`);
      const toAddress = account.address;

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ wei
      const amountInWei = parseEther(amount);

      console.log(`üîó –í—ã–ø–æ–ª–Ω—è–µ–º transfer WETH –Ω–∞ —Å—É–º–º—É ${amount} WETH —Å–∞–º–æ–º—É —Å–µ–±–µ...`);

      const hash = await walletClient.writeContract({
        address: wethAddress as `0x${string}`,
        abi: transferAbi,
        functionName: 'transfer',
        args: [toAddress as `0x${string}`, amountInWei]
      });

      console.log(`üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${hash}`);

      // –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      const receipt = await client.waitForTransactionReceipt({ hash });

      if (receipt.status === 'success') {
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
        return { success: true, hash };
      } else {
        console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞');
        return { success: false, error: 'Transaction failed' };
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è transfer:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ deposit –≤ WETH –∫–æ–Ω—Ç—Ä–∞–∫—Ç
   */
  async performWETHDeposit(privateKey: string, amount: string): Promise<{ success: boolean; hash?: string; error?: string }> {
    try {
      const client = createPublicClient({
        chain: linea,
        transport: http('https://linea-mainnet.blastapi.io/0e189c72-1523-48e1-8727-7dd520f19c1f')
      });

      const walletClient = createWalletClient({
        account: privateKeyToAccount(privateKey as `0x${string}`),
        chain: linea,
        transport: http('https://linea-mainnet.blastapi.io/0e189c72-1523-48e1-8727-7dd520f19c1f')
      });

      // –ê–¥—Ä–µ—Å WETH –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ Linea
      const wethAddress = '0xe5D7C2a44FfDDf6b295A15c148167daaAf5Cf34f';
      
      // ABI –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ deposit
      const depositAbi = [{
        name: 'deposit',
        type: 'function',
        stateMutability: 'payable',
        inputs: [],
        outputs: []
      }] as const;

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ wei
      const amountInWei = parseEther(amount);

      console.log(`üîó –í—ã–ø–æ–ª–Ω—è–µ–º deposit –≤ WETH –Ω–∞ —Å—É–º–º—É ${amount} ETH...`);

      const hash = await walletClient.writeContract({
        address: wethAddress as `0x${string}`,
        abi: depositAbi,
        functionName: 'deposit',
        value: amountInWei
      });

      console.log(`üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${hash}`);

      // –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
      const receipt = await client.waitForTransactionReceipt({ hash });

      if (receipt.status === 'success') {
        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
        return { success: true, hash };
      } else {
        console.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞');
        return { success: false, error: 'Transaction failed' };
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è deposit:', error);
      return { success: false, error: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ WETH –µ—Å–ª–∏ –æ–Ω —Ä–∞–≤–µ–Ω 0
   */
  async checkAndDepositWETH(privateKey: string): Promise<boolean> {
    try {
      const account = privateKeyToAccount(privateKey as `0x${string}`);
      const address = account.address;

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å WETH
      const currentWETHBalance = await this.getWETHBalanceViaRPC(address);
      
      if (!currentWETHBalance) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å WETH');
        return false;
      }

      const wethAmount = parseFloat(currentWETHBalance.replace(' WETH', ''));
      
      if (wethAmount > 0) {
        console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å WETH: ${currentWETHBalance} - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
        return true;
      }

      console.log(`üí∞ –ë–∞–ª–∞–Ω—Å WETH —Ä–∞–≤–µ–Ω 0, –≤—ã–ø–æ–ª–Ω—è–µ–º deposit...`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –æ—Ç 0.000000001 –¥–æ 0.000001
      const minAmount = 0.000000001;
      const maxAmount = 0.000001;
      const randomAmount = (Math.random() * (maxAmount - minAmount) + minAmount).toFixed(9);

      console.log(`üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è deposit: ${randomAmount} ETH`);

      // –í—ã–ø–æ–ª–Ω—è–µ–º deposit
      const result = await this.performWETHDeposit(privateKey, randomAmount);

      if (result.success) {
        // –ñ–¥—ë–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
        console.log('‚è≥ –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...');
        await new Promise(resolve => setTimeout(resolve, 10000));
        
        // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        let newWETHBalance: string | undefined;
        for (let attempt = 0; attempt < 3; attempt++) {
          newWETHBalance = await this.getWETHBalanceViaRPC(address);
          if (newWETHBalance) {
            const wethAmount = parseFloat(newWETHBalance.replace(' WETH', ''));
            if (wethAmount > 0) {
              break;
            }
          }
          if (attempt < 2) {
            console.log(`‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempt + 2}/3 –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...`);
            await new Promise(resolve => setTimeout(resolve, 5000));
          }
        }
        
        if (newWETHBalance) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
          const data = this.loadData();
          const walletIndex = data.wallets.findIndex(w => w.address.toLowerCase() === address.toLowerCase());
          
          if (walletIndex >= 0) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª—ë–∫
            data.wallets[walletIndex].wethBalance = newWETHBalance;
            data.wallets[walletIndex].lastActivity = new Date().toISOString();
          } else {
            // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∫–æ—à–µ–ª—å–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
            const newWallet: WalletData = {
              address,
              wethBalance: newWETHBalance,
              lastActivity: new Date().toISOString(),
              connectedAt: new Date().toISOString()
            };
            data.wallets.push(newWallet);
            console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∫–æ—à–µ–ª—å–∫–∞: ${address}`);
          }
          
          data.lastUpdate = new Date().toISOString();
          this.saveData(data);
          
          console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å WETH –æ–±–Ω–æ–≤–ª—ë–Ω: ${newWETHBalance}`);
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ deposit
          await delayAfterSuccessfulTransaction();
          
          return true;
        } else {
          console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å WETH');
        }
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ deposit: ${result.error}`);
      }

      return false;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è WETH:', error);
      return false;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  async updateDailyTransferStatus(address: string, date: string, amount: string): Promise<void> {
    const data = this.loadData();
    const walletIndex = data.wallets.findIndex(w => w.address.toLowerCase() === address.toLowerCase());
    
    if (walletIndex >= 0) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ—à–µ–ª—ë–∫
      data.wallets[walletIndex].todayTransfer = true;
      data.wallets[walletIndex].lastTransferDate = date;
      data.wallets[walletIndex].transferAmount = amount;
      data.wallets[walletIndex].lastActivity = new Date().toISOString();
    } else {
      // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –∫–æ—à–µ–ª—å–∫–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
      const newWallet: WalletData = {
        address,
        todayTransfer: true,
        lastTransferDate: date,
        transferAmount: amount,
        lastActivity: new Date().toISOString(),
        connectedAt: new Date().toISOString()
      };
      data.wallets.push(newWallet);
      console.log(`üìù –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –∫–æ—à–µ–ª—å–∫–∞: ${address}`);
    }
    
    data.lastUpdate = new Date().toISOString();
    this.saveData(data);
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—ë–Ω: ${date}, —Å—É–º–º–∞: ${amount} WETH`);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ WETH
   */
  async checkAndPerformDailyTransfer(privateKey: string): Promise<boolean> {
    try {
      const account = privateKeyToAccount(privateKey as `0x${string}`);
      const address = account.address;
      const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞
      const walletData = await this.getWalletData(address);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è
      if (walletData?.lastTransferDate === today) {
        console.log('‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è WETH —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è');
        return true;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å WETH
      const wethBalance = await this.getWETHBalanceViaRPC(address);
      if (!wethBalance) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å WETH');
        return false;
      }

      const wethAmount = parseFloat(wethBalance.replace(' WETH', ''));
      if (wethAmount <= 0) {
        console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ WETH –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
        return false;
      }

      console.log(`üéØ –í—ã–ø–æ–ª–Ω—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é WETH...`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—É–º–º—É –æ—Ç 1% –¥–æ 99%
      const minPercent = 0.01; // 1%
      const maxPercent = 0.99; // 99%
      const transferPercent = Math.random() * (maxPercent - minPercent) + minPercent;
      const transferAmount = (wethAmount * transferPercent).toFixed(9);

      console.log(`üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è transfer: ${transferAmount} WETH (${(transferPercent * 100).toFixed(1)}%)`);

      // –í—ã–ø–æ–ª–Ω—è–µ–º transfer
      const result = await this.performWETHTransfer(privateKey, transferAmount);

      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await this.updateDailyTransferStatus(address, today, transferAmount);
        console.log(`‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è WETH –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ transfer
        await delayAfterSuccessfulTransaction();
        
        return true;
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${result.error}`);
        return false;
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
      return false;
    }
  }

  /**
   * –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
   */
  async resetDailyTransferFlags(): Promise<void> {
    const data = this.loadData();
    const today = new Date().toISOString().split('T')[0];
    let updated = false;

    for (const wallet of data.wallets) {
      if (wallet.lastTransferDate && wallet.lastTransferDate !== today) {
        wallet.todayTransfer = false;
        updated = true;
      }
    }

    if (updated) {
      data.lastUpdate = new Date().toISOString();
      this.saveData(data);
      console.log('üîÑ –°–±—Ä–æ—à–µ–Ω—ã —Ñ–ª–∞–≥–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è');
    }
  }
}
