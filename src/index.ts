import { LineaSpinWheelBot, WalletConfig } from './browser-automation';
import { createWalletClient, getAddress } from 'viem';
import { privateKeyToAccount } from 'viem/accounts';
import * as fs from 'fs';
import * as path from 'path';
import { viewWalletData } from './view-wallet-data';
import { WalletDatabase, WalletData } from './modules/database';
import { delayAfterSuccessfulTransaction, shouldSkipWalletDelay, smartDelayBetweenWallets } from './utils/delays';
import { KeyEncryption } from './utils/encryption';

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏–∑ —Ñ–∞–π–ª–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è)
 */
async function loadAllPrivateKeys(): Promise<string[]> {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
  if (KeyEncryption.hasEncryptedKeys()) {
    console.log('üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏');
    
    let password: string;
    let privateKeys: string[];
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏
    while (true) {
      try {
        password = await KeyEncryption.promptPassword();
        privateKeys = KeyEncryption.decryptKeys(password);
        
        if (privateKeys.length === 0) {
          throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π');
        }
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${privateKeys.length} –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π`);
        break;
      } catch (error) {
        console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å');
      }
    }
    
    return privateKeys;
  }
  
  // Fallback –∫ –æ—Ç–∫—Ä—ã—Ç—ã–º –∫–ª—é—á–∞–º
  const keysPath = path.join(process.cwd(), 'keys.txt');
  
  if (!fs.existsSync(keysPath)) {
    throw new Error('–§–∞–π–ª keys.txt –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–ª–∏ –∑–∞—à–∏—Ñ—Ä—É–π—Ç–µ –∏—Ö.');
  }

  console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–ª—é—á–∏ –∏–∑ keys.txt');
  console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ');

  const content = fs.readFileSync(keysPath, 'utf8');
  const lines = content.split('\n');
  const privateKeys: string[] = [];
  
  for (const line of lines) {
    const trimmedLine = line.trim();
    if (trimmedLine && !trimmedLine.startsWith('#')) {
      let privateKey = trimmedLine;
      
      // –î–æ–±–∞–≤–ª—è–µ–º 0x –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!privateKey.startsWith('0x')) {
        privateKey = '0x' + privateKey;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (64 —Å–∏–º–≤–æ–ª–∞ hex)
      if (/^0x[a-fA-F0-9]{64}$/.test(privateKey)) {
        privateKeys.push(privateKey);
      }
    }
  }
  
  if (privateKeys.length === 0) {
    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª–µ keys.txt');
  }
  
  return privateKeys;
}

/**
 * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
 */
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
 */
async function checkSpinsAvailableToday(database: WalletDatabase, address: string): Promise<boolean> {
  return await database.checkSpinsAvailable(address);
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
 */
function createWalletConfig(privateKey: string): WalletConfig {
  const account = privateKeyToAccount(privateKey as `0x${string}`);
  
  return {
    privateKey,
    address: getAddress(account.address)
  };
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞
 */
async function performAllAvailableSpins(bot: LineaSpinWheelBot, database: WalletDatabase, walletConfig: WalletConfig): Promise<void> {
  let spinCount = 0;
  const maxSpins = 10; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  
  while (spinCount < maxSpins) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const spinsAvailable = await checkSpinsAvailableToday(database, walletConfig.address);
    
    if (!spinsAvailable) {
      console.log('‚è∞ –°–ø–∏–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–æ—à–µ–ª—å–∫–æ–º');
      break;
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–∏–Ω
    spinCount++;
    console.log(`üé∞ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–∏–Ω ${spinCount}...`);
    
    const result = await bot.spinWheel();
    
    if (result.success) {
      // –°–ø–∏–Ω —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω
      console.log('‚úÖ –°–ø–∏–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
      const reloaded = await bot.reloadAndReconnect();
      
      if (!reloaded) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–æ—à–µ–ª—å–∫–æ–º');
        break;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
      console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞...');
      await bot.extractAndSaveWalletData();
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–ø–∏–Ω–∞–º–∏ (3 —Å–µ–∫—É–Ω–¥—ã)
      await new Promise(resolve => setTimeout(resolve, 3000));
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏–Ω–∞ ${spinCount}: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
      await bot.extractAndSaveWalletData();
      break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }
  
  if (spinCount >= maxSpins) {
    console.log('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–∏–Ω–æ–≤, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –∫–æ—à–µ–ª—å–∫–æ–º');
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
 */
async function processWallet(privateKey: string, walletIndex: number, totalWallets: number): Promise<{
  hasWETHBalance: boolean;
  dailyTransferCompleted: boolean;
  hasAvailableSpins: boolean;
  spinsPerformed: boolean;
}> {
  const walletConfig = createWalletConfig(privateKey);
  const database = new WalletDatabase();
  
  console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
  console.log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ ${walletIndex + 1}/${totalWallets}: ${walletConfig.address}`);
  
  let bot: LineaSpinWheelBot | undefined;
  
  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
  let hasWETHBalance = false;
  let dailyTransferCompleted = false;
  let hasAvailableSpins = false;
  let spinsPerformed = false;
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å WETH –µ—Å–ª–∏ –æ–Ω —Ä–∞–≤–µ–Ω 0
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å WETH...');
    const wethDepositResult = await database.checkAndDepositWETH(privateKey);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é WETH
    console.log('üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é WETH...');
    const dailyTransferResult = await database.checkAndPerformDailyTransfer(privateKey);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    // –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–æ—à–µ–ª—ë–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ
    const walletData = await database.getWalletData(walletConfig.address);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    hasWETHBalance = walletData?.wethBalance ? parseFloat(walletData.wethBalance.replace(' WETH', '')) > 0 : false;
    dailyTransferCompleted = dailyTransferResult;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (walletData && 
        walletData.spinsAvailable !== undefined && 
        walletData.prizesWon !== undefined && 
        walletData.gamesPlayed !== undefined) {
      hasAvailableSpins = await checkSpinsAvailableToday(database, walletConfig.address);
    } else {
      hasAvailableSpins = false; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ—à–µ–ª—ë–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const existingWalletData = walletData;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    // –ï—Å–ª–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    const isNewDay = existingWalletData ? database.isNewDayForWallet(walletConfig.address) : true;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if (existingWalletData && isNewDay) {
      database.resetDailyTransferFlagIfNewDay(walletConfig.address);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–ø–∏–Ω—ã, –ø—Ä–∏–∑—ã –∏ —Ç.–¥.)
    const hasFullData = existingWalletData && 
      existingWalletData.spinsAvailable !== undefined && 
      existingWalletData.prizesWon !== undefined && 
      existingWalletData.gamesPlayed !== undefined;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    const dailyTransferDoneToday = existingWalletData?.lastTransferDate === today;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    const shouldRefreshSpins = existingWalletData ? database.shouldRefreshSpinsForNewDay(walletConfig.address) : true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –∫–æ—à–µ–ª—ë–∫ —Å–µ–≥–æ–¥–Ω—è (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è + 0 —Å–ø–∏–Ω–æ–≤ + –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏–Ω—ã)
    const walletFullyCompletedToday = existingWalletData && 
      dailyTransferDoneToday && 
      existingWalletData.spinsAvailable === 0 &&
      !shouldRefreshSpins;
    
    if (walletFullyCompletedToday) {
      console.log('‚úÖ –ö–æ—à–µ–ª—ë–∫ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è (–µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ + —Å–ø–∏–Ω—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return {
        hasWETHBalance,
        dailyTransferCompleted: true,
        hasAvailableSpins: false,
        spinsPerformed: false
      };
    }
    
    // –ï—Å–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–∏–Ω–∞—Ö –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏
    // –∏–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏–Ω—ã –Ω–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å
    if (existingWalletData && !isNewDay && hasFullData && (dailyTransferDoneToday || shouldRefreshSpins)) {
      if (shouldRefreshSpins) {
        console.log('üîÑ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏–Ω–æ–≤ –Ω–∞—Å—Ç—É–ø–∏–ª–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏');
      } else {
        console.log('üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–∏–Ω–∞—Ö –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏');
      }
      
      // –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      bot = new LineaSpinWheelBot(walletConfig);
      await bot.initialize();
      
      const connected = await bot.connectToLineaRewards();
      if (!connected) {
        return {
          hasWETHBalance,
          dailyTransferCompleted,
          hasAvailableSpins,
          spinsPerformed: false
        };
      }
      
      // –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–Ω—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const spinsAvailable = await checkSpinsAvailableToday(database, walletConfig.address);
      
      if (spinsAvailable) {
        console.log('‚úÖ –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–ø–∏–Ω—ã');
        await performAllAvailableSpins(bot, database, walletConfig);
        spinsPerformed = true;
      } else {
        console.log('‚è∞ –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        spinsPerformed = false;
      }
    } else if (existingWalletData && !isNewDay && hasFullData && !shouldRefreshSpins) {
      // –ï—Å–ª–∏ –∫–æ—à–µ–ª—ë–∫ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —ç—Ç–æ –Ω–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –Ω–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏–Ω—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–Ω—ã
      const spinsAvailable = await checkSpinsAvailableToday(database, walletConfig.address);
      
      if (spinsAvailable) {
        console.log('‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–ø–∏–Ω—ã');
        
        // –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–Ω—ã
        bot = new LineaSpinWheelBot(walletConfig);
        await bot.initialize();
        
        const connected = await bot.connectToLineaRewards();
        if (!connected) {
          return {
            hasWETHBalance,
            dailyTransferCompleted,
            hasAvailableSpins,
            spinsPerformed: false
          };
        }
        
        await performAllAvailableSpins(bot, database, walletConfig);
        spinsPerformed = true;
      } else {
        console.log('‚è∞ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
        spinsPerformed = false;
      }
    } else {
      // –ï—Å–ª–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –Ω–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏–Ω—ã –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏
      if (!existingWalletData) {
        console.log('üîç –ö–æ—à–µ–ª—ë–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å');
      } else if (isNewDay) {
        console.log('üåÖ –ù–∞—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –¥–µ–Ω—å - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏');
      } else if (shouldRefreshSpins) {
        console.log('‚è∞ –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏–Ω–æ–≤ –Ω–∞—Å—Ç—É–ø–∏–ª–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏');
      } else {
        console.log('üìä –£ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞—Ä—Ç–æ—á–∫–∏');
      }
      // –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
      bot = new LineaSpinWheelBot(walletConfig);
      await bot.initialize();
      
      const connected = await bot.connectToLineaRewards();
      if (!connected) {
        return {
          hasWETHBalance,
          dailyTransferCompleted,
          hasAvailableSpins,
          spinsPerformed: false
        };
      }
      
      // –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–Ω—ã —É –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      const spinsAvailable = await checkSpinsAvailableToday(database, walletConfig.address);
      
      if (spinsAvailable) {
        console.log('‚úÖ –£ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–∏–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å–ø–∏–Ω—ã');
        await performAllAvailableSpins(bot, database, walletConfig);
        spinsPerformed = true;
      } else {
        console.log('‚è∞ –£ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏–Ω–æ–≤');
        spinsPerformed = false;
      }
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ ${walletConfig.address}:`, error);
  } finally {
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
    if (bot) {
      try {
        await bot.close();
      } catch (closeError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞:', closeError);
      }
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
  return {
    hasWETHBalance,
    dailyTransferCompleted,
    hasAvailableSpins,
    spinsPerformed
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
 */
async function main() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    if (KeyEncryption.hasPlainKeys() && !KeyEncryption.hasEncryptedKeys()) {
      console.log('üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª keys.txt —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–ª—é—á–∞–º–∏');
      console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
      
      const rl = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout
      });

      const answer = await new Promise<string>((resolve) => {
        rl.question('–•–æ—Ç–∏—Ç–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ —Å–µ–π—á–∞—Å? (y/n): ', (answer: string) => {
          rl.close();
          resolve(answer.toLowerCase());
        });
      });

      if (answer === 'y' || answer === 'yes') {
        try {
          await KeyEncryption.migratePlainKeys();
          console.log('\n‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: npm start');
          console.log('üóëÔ∏è  –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª keys.txt –≤—Ä—É—á–Ω—É—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
          return;
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
          console.log('‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
          console.log('üîê –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞');
          process.exit(1);
        }
      } else {
        console.log('‚ÑπÔ∏è –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...\n');
      }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
    const privateKeys = await loadAllPrivateKeys();
    
    // –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—Ä–∏ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    const database = new WalletDatabase();
    await database.resetDailyTransferFlags();
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    const shuffledKeys = shuffleArray(privateKeys);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
    for (let i = 0; i < shuffledKeys.length; i++) {
      const walletResult = await processWallet(shuffledKeys[i], i, shuffledKeys.length);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π)
      if (i < shuffledKeys.length - 1) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏
        const shouldSkip = shouldSkipWalletDelay(
          walletResult.hasWETHBalance,
          walletResult.dailyTransferCompleted,
          walletResult.hasAvailableSpins
        );
        
        if (shouldSkip) {
          console.log('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏ (–∫–æ—à–µ–ª—ë–∫ –≥–æ—Ç–æ–≤)');
        } else {
          // –£–º–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–æ—à–µ–ª—å–∫–∞–º–∏ —Å —É—á–µ—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–ø–∏–Ω–æ–≤
          await smartDelayBetweenWallets(walletResult.spinsPerformed);
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}



// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
main();
